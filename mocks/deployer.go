// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/bborbe/world"
)

type Deployer struct {
	DeployStub        func(ctx context.Context) error
	deployMutex       sync.RWMutex
	deployArgsForCall []struct {
		ctx context.Context
	}
	deployReturns struct {
		result1 error
	}
	deployReturnsOnCall map[int]struct {
		result1 error
	}
	ValidateStub        func(ctx context.Context) error
	validateMutex       sync.RWMutex
	validateArgsForCall []struct {
		ctx context.Context
	}
	validateReturns struct {
		result1 error
	}
	validateReturnsOnCall map[int]struct {
		result1 error
	}
	SatisfiedStub        func(ctx context.Context) (bool, error)
	satisfiedMutex       sync.RWMutex
	satisfiedArgsForCall []struct {
		ctx context.Context
	}
	satisfiedReturns struct {
		result1 bool
		result2 error
	}
	satisfiedReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	GetUploaderStub        func() world.Uploader
	getUploaderMutex       sync.RWMutex
	getUploaderArgsForCall []struct{}
	getUploaderReturns     struct {
		result1 world.Uploader
	}
	getUploaderReturnsOnCall map[int]struct {
		result1 world.Uploader
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Deployer) Deploy(ctx context.Context) error {
	fake.deployMutex.Lock()
	ret, specificReturn := fake.deployReturnsOnCall[len(fake.deployArgsForCall)]
	fake.deployArgsForCall = append(fake.deployArgsForCall, struct {
		ctx context.Context
	}{ctx})
	fake.recordInvocation("Deploy", []interface{}{ctx})
	fake.deployMutex.Unlock()
	if fake.DeployStub != nil {
		return fake.DeployStub(ctx)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deployReturns.result1
}

func (fake *Deployer) DeployCallCount() int {
	fake.deployMutex.RLock()
	defer fake.deployMutex.RUnlock()
	return len(fake.deployArgsForCall)
}

func (fake *Deployer) DeployArgsForCall(i int) context.Context {
	fake.deployMutex.RLock()
	defer fake.deployMutex.RUnlock()
	return fake.deployArgsForCall[i].ctx
}

func (fake *Deployer) DeployReturns(result1 error) {
	fake.DeployStub = nil
	fake.deployReturns = struct {
		result1 error
	}{result1}
}

func (fake *Deployer) DeployReturnsOnCall(i int, result1 error) {
	fake.DeployStub = nil
	if fake.deployReturnsOnCall == nil {
		fake.deployReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deployReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Deployer) Validate(ctx context.Context) error {
	fake.validateMutex.Lock()
	ret, specificReturn := fake.validateReturnsOnCall[len(fake.validateArgsForCall)]
	fake.validateArgsForCall = append(fake.validateArgsForCall, struct {
		ctx context.Context
	}{ctx})
	fake.recordInvocation("Validate", []interface{}{ctx})
	fake.validateMutex.Unlock()
	if fake.ValidateStub != nil {
		return fake.ValidateStub(ctx)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.validateReturns.result1
}

func (fake *Deployer) ValidateCallCount() int {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return len(fake.validateArgsForCall)
}

func (fake *Deployer) ValidateArgsForCall(i int) context.Context {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return fake.validateArgsForCall[i].ctx
}

func (fake *Deployer) ValidateReturns(result1 error) {
	fake.ValidateStub = nil
	fake.validateReturns = struct {
		result1 error
	}{result1}
}

func (fake *Deployer) ValidateReturnsOnCall(i int, result1 error) {
	fake.ValidateStub = nil
	if fake.validateReturnsOnCall == nil {
		fake.validateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Deployer) Satisfied(ctx context.Context) (bool, error) {
	fake.satisfiedMutex.Lock()
	ret, specificReturn := fake.satisfiedReturnsOnCall[len(fake.satisfiedArgsForCall)]
	fake.satisfiedArgsForCall = append(fake.satisfiedArgsForCall, struct {
		ctx context.Context
	}{ctx})
	fake.recordInvocation("Satisfied", []interface{}{ctx})
	fake.satisfiedMutex.Unlock()
	if fake.SatisfiedStub != nil {
		return fake.SatisfiedStub(ctx)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.satisfiedReturns.result1, fake.satisfiedReturns.result2
}

func (fake *Deployer) SatisfiedCallCount() int {
	fake.satisfiedMutex.RLock()
	defer fake.satisfiedMutex.RUnlock()
	return len(fake.satisfiedArgsForCall)
}

func (fake *Deployer) SatisfiedArgsForCall(i int) context.Context {
	fake.satisfiedMutex.RLock()
	defer fake.satisfiedMutex.RUnlock()
	return fake.satisfiedArgsForCall[i].ctx
}

func (fake *Deployer) SatisfiedReturns(result1 bool, result2 error) {
	fake.SatisfiedStub = nil
	fake.satisfiedReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *Deployer) SatisfiedReturnsOnCall(i int, result1 bool, result2 error) {
	fake.SatisfiedStub = nil
	if fake.satisfiedReturnsOnCall == nil {
		fake.satisfiedReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.satisfiedReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *Deployer) GetUploader() world.Uploader {
	fake.getUploaderMutex.Lock()
	ret, specificReturn := fake.getUploaderReturnsOnCall[len(fake.getUploaderArgsForCall)]
	fake.getUploaderArgsForCall = append(fake.getUploaderArgsForCall, struct{}{})
	fake.recordInvocation("GetUploader", []interface{}{})
	fake.getUploaderMutex.Unlock()
	if fake.GetUploaderStub != nil {
		return fake.GetUploaderStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getUploaderReturns.result1
}

func (fake *Deployer) GetUploaderCallCount() int {
	fake.getUploaderMutex.RLock()
	defer fake.getUploaderMutex.RUnlock()
	return len(fake.getUploaderArgsForCall)
}

func (fake *Deployer) GetUploaderReturns(result1 world.Uploader) {
	fake.GetUploaderStub = nil
	fake.getUploaderReturns = struct {
		result1 world.Uploader
	}{result1}
}

func (fake *Deployer) GetUploaderReturnsOnCall(i int, result1 world.Uploader) {
	fake.GetUploaderStub = nil
	if fake.getUploaderReturnsOnCall == nil {
		fake.getUploaderReturnsOnCall = make(map[int]struct {
			result1 world.Uploader
		})
	}
	fake.getUploaderReturnsOnCall[i] = struct {
		result1 world.Uploader
	}{result1}
}

func (fake *Deployer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deployMutex.RLock()
	defer fake.deployMutex.RUnlock()
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	fake.satisfiedMutex.RLock()
	defer fake.satisfiedMutex.RUnlock()
	fake.getUploaderMutex.RLock()
	defer fake.getUploaderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Deployer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ world.Deployer = new(Deployer)
