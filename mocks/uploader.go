// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/bborbe/world"
)

type Uploader struct {
	UploadStub        func(ctx context.Context) error
	uploadMutex       sync.RWMutex
	uploadArgsForCall []struct {
		ctx context.Context
	}
	uploadReturns struct {
		result1 error
	}
	uploadReturnsOnCall map[int]struct {
		result1 error
	}
	ValidateStub        func(ctx context.Context) error
	validateMutex       sync.RWMutex
	validateArgsForCall []struct {
		ctx context.Context
	}
	validateReturns struct {
		result1 error
	}
	validateReturnsOnCall map[int]struct {
		result1 error
	}
	SatisfiedStub        func(ctx context.Context) (bool, error)
	satisfiedMutex       sync.RWMutex
	satisfiedArgsForCall []struct {
		ctx context.Context
	}
	satisfiedReturns struct {
		result1 bool
		result2 error
	}
	satisfiedReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Uploader) Upload(ctx context.Context) error {
	fake.uploadMutex.Lock()
	ret, specificReturn := fake.uploadReturnsOnCall[len(fake.uploadArgsForCall)]
	fake.uploadArgsForCall = append(fake.uploadArgsForCall, struct {
		ctx context.Context
	}{ctx})
	fake.recordInvocation("Upload", []interface{}{ctx})
	fake.uploadMutex.Unlock()
	if fake.UploadStub != nil {
		return fake.UploadStub(ctx)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.uploadReturns.result1
}

func (fake *Uploader) UploadCallCount() int {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return len(fake.uploadArgsForCall)
}

func (fake *Uploader) UploadArgsForCall(i int) context.Context {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return fake.uploadArgsForCall[i].ctx
}

func (fake *Uploader) UploadReturns(result1 error) {
	fake.UploadStub = nil
	fake.uploadReturns = struct {
		result1 error
	}{result1}
}

func (fake *Uploader) UploadReturnsOnCall(i int, result1 error) {
	fake.UploadStub = nil
	if fake.uploadReturnsOnCall == nil {
		fake.uploadReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.uploadReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Uploader) Validate(ctx context.Context) error {
	fake.validateMutex.Lock()
	ret, specificReturn := fake.validateReturnsOnCall[len(fake.validateArgsForCall)]
	fake.validateArgsForCall = append(fake.validateArgsForCall, struct {
		ctx context.Context
	}{ctx})
	fake.recordInvocation("Validate", []interface{}{ctx})
	fake.validateMutex.Unlock()
	if fake.ValidateStub != nil {
		return fake.ValidateStub(ctx)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.validateReturns.result1
}

func (fake *Uploader) ValidateCallCount() int {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return len(fake.validateArgsForCall)
}

func (fake *Uploader) ValidateArgsForCall(i int) context.Context {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return fake.validateArgsForCall[i].ctx
}

func (fake *Uploader) ValidateReturns(result1 error) {
	fake.ValidateStub = nil
	fake.validateReturns = struct {
		result1 error
	}{result1}
}

func (fake *Uploader) ValidateReturnsOnCall(i int, result1 error) {
	fake.ValidateStub = nil
	if fake.validateReturnsOnCall == nil {
		fake.validateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Uploader) Satisfied(ctx context.Context) (bool, error) {
	fake.satisfiedMutex.Lock()
	ret, specificReturn := fake.satisfiedReturnsOnCall[len(fake.satisfiedArgsForCall)]
	fake.satisfiedArgsForCall = append(fake.satisfiedArgsForCall, struct {
		ctx context.Context
	}{ctx})
	fake.recordInvocation("Satisfied", []interface{}{ctx})
	fake.satisfiedMutex.Unlock()
	if fake.SatisfiedStub != nil {
		return fake.SatisfiedStub(ctx)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.satisfiedReturns.result1, fake.satisfiedReturns.result2
}

func (fake *Uploader) SatisfiedCallCount() int {
	fake.satisfiedMutex.RLock()
	defer fake.satisfiedMutex.RUnlock()
	return len(fake.satisfiedArgsForCall)
}

func (fake *Uploader) SatisfiedArgsForCall(i int) context.Context {
	fake.satisfiedMutex.RLock()
	defer fake.satisfiedMutex.RUnlock()
	return fake.satisfiedArgsForCall[i].ctx
}

func (fake *Uploader) SatisfiedReturns(result1 bool, result2 error) {
	fake.SatisfiedStub = nil
	fake.satisfiedReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *Uploader) SatisfiedReturnsOnCall(i int, result1 bool, result2 error) {
	fake.SatisfiedStub = nil
	if fake.satisfiedReturnsOnCall == nil {
		fake.satisfiedReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.satisfiedReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *Uploader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	fake.satisfiedMutex.RLock()
	defer fake.satisfiedMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Uploader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ world.Uploader = new(Uploader)
