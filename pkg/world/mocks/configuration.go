// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/bborbe/world/pkg/world"
)

type Configuration struct {
	ApplierStub        func() (world.Applier, error)
	applierMutex       sync.RWMutex
	applierArgsForCall []struct {
	}
	applierReturns struct {
		result1 world.Applier
		result2 error
	}
	applierReturnsOnCall map[int]struct {
		result1 world.Applier
		result2 error
	}
	ChildrenStub        func() []world.Configuration
	childrenMutex       sync.RWMutex
	childrenArgsForCall []struct {
	}
	childrenReturns struct {
		result1 []world.Configuration
	}
	childrenReturnsOnCall map[int]struct {
		result1 []world.Configuration
	}
	ValidateStub        func(context.Context) error
	validateMutex       sync.RWMutex
	validateArgsForCall []struct {
		arg1 context.Context
	}
	validateReturns struct {
		result1 error
	}
	validateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Configuration) Applier() (world.Applier, error) {
	fake.applierMutex.Lock()
	ret, specificReturn := fake.applierReturnsOnCall[len(fake.applierArgsForCall)]
	fake.applierArgsForCall = append(fake.applierArgsForCall, struct {
	}{})
	stub := fake.ApplierStub
	fakeReturns := fake.applierReturns
	fake.recordInvocation("Applier", []interface{}{})
	fake.applierMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Configuration) ApplierCallCount() int {
	fake.applierMutex.RLock()
	defer fake.applierMutex.RUnlock()
	return len(fake.applierArgsForCall)
}

func (fake *Configuration) ApplierCalls(stub func() (world.Applier, error)) {
	fake.applierMutex.Lock()
	defer fake.applierMutex.Unlock()
	fake.ApplierStub = stub
}

func (fake *Configuration) ApplierReturns(result1 world.Applier, result2 error) {
	fake.applierMutex.Lock()
	defer fake.applierMutex.Unlock()
	fake.ApplierStub = nil
	fake.applierReturns = struct {
		result1 world.Applier
		result2 error
	}{result1, result2}
}

func (fake *Configuration) ApplierReturnsOnCall(i int, result1 world.Applier, result2 error) {
	fake.applierMutex.Lock()
	defer fake.applierMutex.Unlock()
	fake.ApplierStub = nil
	if fake.applierReturnsOnCall == nil {
		fake.applierReturnsOnCall = make(map[int]struct {
			result1 world.Applier
			result2 error
		})
	}
	fake.applierReturnsOnCall[i] = struct {
		result1 world.Applier
		result2 error
	}{result1, result2}
}

func (fake *Configuration) Children() []world.Configuration {
	fake.childrenMutex.Lock()
	ret, specificReturn := fake.childrenReturnsOnCall[len(fake.childrenArgsForCall)]
	fake.childrenArgsForCall = append(fake.childrenArgsForCall, struct {
	}{})
	stub := fake.ChildrenStub
	fakeReturns := fake.childrenReturns
	fake.recordInvocation("Children", []interface{}{})
	fake.childrenMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Configuration) ChildrenCallCount() int {
	fake.childrenMutex.RLock()
	defer fake.childrenMutex.RUnlock()
	return len(fake.childrenArgsForCall)
}

func (fake *Configuration) ChildrenCalls(stub func() []world.Configuration) {
	fake.childrenMutex.Lock()
	defer fake.childrenMutex.Unlock()
	fake.ChildrenStub = stub
}

func (fake *Configuration) ChildrenReturns(result1 []world.Configuration) {
	fake.childrenMutex.Lock()
	defer fake.childrenMutex.Unlock()
	fake.ChildrenStub = nil
	fake.childrenReturns = struct {
		result1 []world.Configuration
	}{result1}
}

func (fake *Configuration) ChildrenReturnsOnCall(i int, result1 []world.Configuration) {
	fake.childrenMutex.Lock()
	defer fake.childrenMutex.Unlock()
	fake.ChildrenStub = nil
	if fake.childrenReturnsOnCall == nil {
		fake.childrenReturnsOnCall = make(map[int]struct {
			result1 []world.Configuration
		})
	}
	fake.childrenReturnsOnCall[i] = struct {
		result1 []world.Configuration
	}{result1}
}

func (fake *Configuration) Validate(arg1 context.Context) error {
	fake.validateMutex.Lock()
	ret, specificReturn := fake.validateReturnsOnCall[len(fake.validateArgsForCall)]
	fake.validateArgsForCall = append(fake.validateArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ValidateStub
	fakeReturns := fake.validateReturns
	fake.recordInvocation("Validate", []interface{}{arg1})
	fake.validateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Configuration) ValidateCallCount() int {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return len(fake.validateArgsForCall)
}

func (fake *Configuration) ValidateCalls(stub func(context.Context) error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = stub
}

func (fake *Configuration) ValidateArgsForCall(i int) context.Context {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	argsForCall := fake.validateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Configuration) ValidateReturns(result1 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	fake.validateReturns = struct {
		result1 error
	}{result1}
}

func (fake *Configuration) ValidateReturnsOnCall(i int, result1 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	if fake.validateReturnsOnCall == nil {
		fake.validateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Configuration) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applierMutex.RLock()
	defer fake.applierMutex.RUnlock()
	fake.childrenMutex.RLock()
	defer fake.childrenMutex.RUnlock()
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Configuration) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ world.Configuration = new(Configuration)
